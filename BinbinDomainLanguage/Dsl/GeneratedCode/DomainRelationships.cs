//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasAggregateRootEntity
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b6f32684-f0e2-4822-9c67-7de24cff3b0d")]
	public partial class DominDriveDesignModelHasAggregateRootEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasAggregateRootEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb6f32684, 0xf0e2, 0x4822, 0x9c, 0x67, 0x7d, 0xe2, 0x4c, 0xff, 0x3b, 0x0d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasAggregateRootEntity link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">AggregateRootEntities to use as the target of the relationship.</param>
		public DominDriveDesignModelHasAggregateRootEntity(DominDriveDesignModel source, AggregateRootEntities target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasAggregateRootEntity.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasAggregateRootEntity.AggregateRootEntitiesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasAggregateRootEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasAggregateRootEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasAggregateRootEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasAggregateRootEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0x91441eb9, 0xb6ce, 0x40db, 0x98, 0xb2, 0x7a, 0x21, 0xed, 0x50, 0x3d, 0x31);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregateRootEntity", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("91441eb9-b6ce-40db-98b2-7a21ed503d31")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a AggregateRootEntities
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(AggregateRootEntities element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateRootEntitiesDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(AggregateRootEntities element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateRootEntitiesDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region AggregateRootEntities domain role code
		
		/// <summary>
		/// AggregateRootEntities domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootEntitiesDomainRoleId = new global::System.Guid(0x0426848d, 0x57d7, 0x41c0, 0xbb, 0x89, 0xb3, 0xc1, 0xb3, 0xf3, 0x2e, 0x36);
		
		/// <summary>
		/// DomainRole AggregateRootEntities
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.AggregateRootEntities
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/AggregateRootEntities.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/AggregateRootEntities.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity/AggregateRootEntities.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0426848d-57d7-41c0-bb89-b3c1b3f32e36")]
		public virtual AggregateRootEntities AggregateRootEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRootEntities)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootEntitiesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootEntitiesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRootEntity of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of AggregateRootEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateRootEntities> GetAggregateRootEntity(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRootEntities>, AggregateRootEntities>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasAggregateRootEntity links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> GetLinksToAggregateRootEntity ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region AggregateRootEntities link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasAggregateRootEntity link to a AggregateRootEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities aggregateRootEntitiesInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity>(aggregateRootEntitiesInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.AggregateRootEntitiesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateRootEntities not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasAggregateRootEntity instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasAggregateRootEntity links between a given DominDriveDesignModel and a AggregateRootEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity link in links )
			{
				if ( target.Equals(link.AggregateRootEntities) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasAggregateRootEntity link between a given DominDriveDesignModeland a AggregateRootEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasAggregateRootEntity link in links )
			{
				if ( target.Equals(link.AggregateRootEntities) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship EntityModelReferencesValueObjectModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ee3ebfe0-e241-418f-a34c-e66475acb6dc")]
	public partial class EntityModelReferencesValueObjectModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityModelReferencesValueObjectModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee3ebfe0, 0xe241, 0x418f, 0xa3, 0x4c, 0xe6, 0x64, 0x75, 0xac, 0xb6, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityModelReferencesValueObjectModels link in the same Partition as the given EntityModel
		/// </summary>
		/// <param name="source">EntityModel to use as the source of the relationship.</param>
		/// <param name="target">ValueObjectModel to use as the target of the relationship.</param>
		public EntityModelReferencesValueObjectModels(EntityModel source, ValueObjectModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityModelReferencesValueObjectModels.EntityModelDomainRoleId, source), new DslModeling::RoleAssignment(EntityModelReferencesValueObjectModels.ValueObjectModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelReferencesValueObjectModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelReferencesValueObjectModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelReferencesValueObjectModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelReferencesValueObjectModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityModel domain role code
		
		/// <summary>
		/// EntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityModelDomainRoleId = new global::System.Guid(0x3daa2eb0, 0x825f, 0x4c66, 0x8b, 0xf5, 0x33, 0x8c, 0x2d, 0x3b, 0x96, 0xf3);
		
		/// <summary>
		/// DomainRole EntityModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.EntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/EntityModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/EntityModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueObjectModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/EntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3daa2eb0-825f-4c66-8bf5-338c2d3b96f3")]
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityModels of a ValueObjectModel
		/// <summary>
		/// Gets a list of EntityModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityModel> GetEntityModels(ValueObjectModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityModel>, EntityModel>(element, ValueObjectModelDomainRoleId);
		}
		#endregion
		#region ValueObjectModel domain role code
		
		/// <summary>
		/// ValueObjectModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueObjectModelDomainRoleId = new global::System.Guid(0xb95fb400, 0x8416, 0x467f, 0xb9, 0xe3, 0x7d, 0x06, 0x0b, 0xa7, 0x9d, 0x8f);
		
		/// <summary>
		/// DomainRole ValueObjectModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.ValueObjectModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/ValueObjectModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/ValueObjectModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels/ValueObjectModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b95fb400-8416-467f-b9e3-7d060ba79d8f")]
		public virtual ValueObjectModel ValueObjectModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueObjectModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueObjectModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueObjectModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueObjectModels of a EntityModel
		/// <summary>
		/// Gets a list of ValueObjectModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueObjectModel> GetValueObjectModels(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ValueObjectModel>, ValueObjectModel>(element, EntityModelDomainRoleId);
		}
		#endregion
		#region EntityModel link accessor
		/// <summary>
		/// Get the list of EntityModelReferencesValueObjectModels links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> GetLinksToValueObjectModels ( global::Com.Lotos.BinbinDomainLanguage.EntityModel entityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels>(entityModelInstance, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.EntityModelDomainRoleId);
		}
		#endregion
		#region ValueObjectModel link accessor
		/// <summary>
		/// Get the list of EntityModelReferencesValueObjectModels links to a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> GetLinksToEntityModels ( global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel valueObjectModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels>(valueObjectModelInstance, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.ValueObjectModelDomainRoleId);
		}
		#endregion
		#region EntityModelReferencesValueObjectModels instance accessors
		
		/// <summary>
		/// Get any EntityModelReferencesValueObjectModels links between a given EntityModel and a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.EntityModel source, global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels>(source, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.EntityModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels link in links )
			{
				if ( target.Equals(link.ValueObjectModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityModelReferencesValueObjectModels link between a given EntityModeland a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels GetLink( global::Com.Lotos.BinbinDomainLanguage.EntityModel source, global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels>(source, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels.EntityModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesValueObjectModels link in links )
			{
				if ( target.Equals(link.ValueObjectModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship EntityModelReferencesTargetEntityModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("87359c90-3ac6-44bc-ab4a-07696e373499")]
	public partial class EntityModelReferencesTargetEntityModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityModelReferencesTargetEntityModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x87359c90, 0x3ac6, 0x44bc, 0xab, 0x4a, 0x07, 0x69, 0x6e, 0x37, 0x34, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityModelReferencesTargetEntityModels link in the same Partition as the given EntityModel
		/// </summary>
		/// <param name="source">EntityModel to use as the source of the relationship.</param>
		/// <param name="target">EntityModel to use as the target of the relationship.</param>
		public EntityModelReferencesTargetEntityModels(EntityModel source, EntityModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityModelReferencesTargetEntityModels.SourceEntityModelDomainRoleId, source), new DslModeling::RoleAssignment(EntityModelReferencesTargetEntityModels.TargetEntityModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelReferencesTargetEntityModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelReferencesTargetEntityModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelReferencesTargetEntityModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelReferencesTargetEntityModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntityModel domain role code
		
		/// <summary>
		/// SourceEntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityModelDomainRoleId = new global::System.Guid(0xedbf93a6, 0x47db, 0x4504, 0x8e, 0xff, 0x91, 0x4f, 0x80, 0xcf, 0x5e, 0x99);
		
		/// <summary>
		/// DomainRole SourceEntityModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.SourceEntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/SourceEntityModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/SourceEntityModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetEntityModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/SourceEntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("edbf93a6-47db-4504-8eff-914f80cf5e99")]
		public virtual EntityModel SourceEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceEntityModels of a EntityModel
		/// <summary>
		/// Gets a list of SourceEntityModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityModel> GetSourceEntityModels(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityModel>, EntityModel>(element, TargetEntityModelDomainRoleId);
		}
		#endregion
		#region TargetEntityModel domain role code
		
		/// <summary>
		/// TargetEntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityModelDomainRoleId = new global::System.Guid(0x82fc04c7, 0xe5cb, 0x4250, 0x9a, 0xd8, 0x3f, 0x23, 0x5f, 0x1f, 0x2d, 0xba);
		
		/// <summary>
		/// DomainRole TargetEntityModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.TargetEntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/TargetEntityModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/TargetEntityModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceEntityModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels/TargetEntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82fc04c7-e5cb-4250-9ad8-3f235f1f2dba")]
		public virtual EntityModel TargetEntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetEntityModels of a EntityModel
		/// <summary>
		/// Gets a list of TargetEntityModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityModel> GetTargetEntityModels(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityModel>, EntityModel>(element, SourceEntityModelDomainRoleId);
		}
		#endregion
		#region SourceEntityModel link accessor
		/// <summary>
		/// Get the list of EntityModelReferencesTargetEntityModels links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> GetLinksToTargetEntityModels ( global::Com.Lotos.BinbinDomainLanguage.EntityModel sourceEntityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels>(sourceEntityModelInstance, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.SourceEntityModelDomainRoleId);
		}
		#endregion
		#region TargetEntityModel link accessor
		/// <summary>
		/// Get the list of EntityModelReferencesTargetEntityModels links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> GetLinksToSourceEntityModels ( global::Com.Lotos.BinbinDomainLanguage.EntityModel targetEntityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels>(targetEntityModelInstance, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.TargetEntityModelDomainRoleId);
		}
		#endregion
		#region EntityModelReferencesTargetEntityModels instance accessors
		
		/// <summary>
		/// Get any EntityModelReferencesTargetEntityModels links between a given EntityModel and a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.EntityModel source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.SourceEntityModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels link in links )
			{
				if ( target.Equals(link.TargetEntityModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityModelReferencesTargetEntityModels link between a given EntityModeland a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels GetLink( global::Com.Lotos.BinbinDomainLanguage.EntityModel source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels.SourceEntityModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.EntityModelReferencesTargetEntityModels link in links )
			{
				if ( target.Equals(link.TargetEntityModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship AggregateRootEntitiesReferencesEntityModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("611a3c81-eb01-4b68-99c8-52ed969acc45")]
	public partial class AggregateRootEntitiesReferencesEntityModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootEntitiesReferencesEntityModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x611a3c81, 0xeb01, 0x4b68, 0x99, 0xc8, 0x52, 0xed, 0x96, 0x9a, 0xcc, 0x45);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootEntitiesReferencesEntityModels link in the same Partition as the given AggregateRootEntities
		/// </summary>
		/// <param name="source">AggregateRootEntities to use as the source of the relationship.</param>
		/// <param name="target">EntityModel to use as the target of the relationship.</param>
		public AggregateRootEntitiesReferencesEntityModels(AggregateRootEntities source, EntityModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootEntitiesReferencesEntityModels.AggregateRootEntitiesDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootEntitiesReferencesEntityModels.EntityModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootEntitiesReferencesEntityModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootEntitiesReferencesEntityModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootEntitiesReferencesEntityModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootEntitiesReferencesEntityModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRootEntities domain role code
		
		/// <summary>
		/// AggregateRootEntities domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootEntitiesDomainRoleId = new global::System.Guid(0xf04ad780, 0x82ea, 0x4b3d, 0xb0, 0x63, 0xda, 0x22, 0x74, 0x38, 0x4d, 0x4b);
		
		/// <summary>
		/// DomainRole AggregateRootEntities
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.AggregateRootEntities
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/AggregateRootEntities.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/AggregateRootEntities.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/AggregateRootEntities.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f04ad780-82ea-4b3d-b063-da2274384d4b")]
		public virtual AggregateRootEntities AggregateRootEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRootEntities)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootEntitiesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootEntitiesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRootEntity of a EntityModel
		/// <summary>
		/// Gets a list of AggregateRootEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateRootEntities> GetAggregateRootEntity(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRootEntities>, AggregateRootEntities>(element, EntityModelDomainRoleId);
		}
		#endregion
		#region EntityModel domain role code
		
		/// <summary>
		/// EntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityModelDomainRoleId = new global::System.Guid(0xbe5561cb, 0x4576, 0x44e6, 0x81, 0xba, 0xb2, 0x25, 0x84, 0x8a, 0xa8, 0x1a);
		
		/// <summary>
		/// DomainRole EntityModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.EntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/EntityModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/EntityModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRootEntity", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels/EntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("be5561cb-4576-44e6-81ba-b225848aa81a")]
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityModels of a AggregateRootEntities
		/// <summary>
		/// Gets a list of EntityModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityModel> GetEntityModels(AggregateRootEntities element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityModel>, EntityModel>(element, AggregateRootEntitiesDomainRoleId);
		}
		#endregion
		#region AggregateRootEntities link accessor
		/// <summary>
		/// Get the list of AggregateRootEntitiesReferencesEntityModels links to a AggregateRootEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> GetLinksToEntityModels ( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities aggregateRootEntitiesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels>(aggregateRootEntitiesInstance, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.AggregateRootEntitiesDomainRoleId);
		}
		#endregion
		#region EntityModel link accessor
		/// <summary>
		/// Get the list of AggregateRootEntitiesReferencesEntityModels links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> GetLinksToAggregateRootEntity ( global::Com.Lotos.BinbinDomainLanguage.EntityModel entityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels>(entityModelInstance, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.EntityModelDomainRoleId);
		}
		#endregion
		#region AggregateRootEntitiesReferencesEntityModels instance accessors
		
		/// <summary>
		/// Get any AggregateRootEntitiesReferencesEntityModels links between a given AggregateRootEntities and a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.AggregateRootEntitiesDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels link in links )
			{
				if ( target.Equals(link.EntityModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootEntitiesReferencesEntityModels link between a given AggregateRootEntitiesand a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels GetLink( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels.AggregateRootEntitiesDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntitiesReferencesEntityModels link in links )
			{
				if ( target.Equals(link.EntityModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasEntityModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("575d5019-845c-40a8-ba45-4d65045bac4a")]
	public partial class DominDriveDesignModelHasEntityModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasEntityModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x575d5019, 0x845c, 0x40a8, 0xba, 0x45, 0x4d, 0x65, 0x04, 0x5b, 0xac, 0x4a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasEntityModels link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">EntityModel to use as the target of the relationship.</param>
		public DominDriveDesignModelHasEntityModels(DominDriveDesignModel source, EntityModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasEntityModels.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasEntityModels.EntityModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasEntityModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasEntityModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasEntityModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasEntityModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0xec07312d, 0x2615, 0x4f78, 0xae, 0xe3, 0xaf, 0x60, 0x04, 0x30, 0xe8, 0xcc);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ec07312d-2615-4f78-aee3-af600430e8cc")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a EntityModel
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(EntityModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityModelDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(EntityModel element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityModelDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region EntityModel domain role code
		
		/// <summary>
		/// EntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityModelDomainRoleId = new global::System.Guid(0x9aa3771e, 0x801d, 0x49e7, 0xa2, 0xa9, 0x7a, 0x71, 0xad, 0xe8, 0x57, 0x45);
		
		/// <summary>
		/// DomainRole EntityModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.EntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/EntityModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/EntityModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels/EntityModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9aa3771e-801d-49e7-a2a9-7a71ade85745")]
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityModels of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of EntityModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EntityModel> GetEntityModels(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityModel>, EntityModel>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasEntityModels links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> GetLinksToEntityModels ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region EntityModel link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasEntityModels link to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.EntityModel entityModelInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels>(entityModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.EntityModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EntityModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasEntityModels instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasEntityModels links between a given DominDriveDesignModel and a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels link in links )
			{
				if ( target.Equals(link.EntityModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasEntityModels link between a given DominDriveDesignModeland a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.EntityModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasEntityModels link in links )
			{
				if ( target.Equals(link.EntityModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasDomainServiceModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("76d97755-3e4a-455d-bcdd-ff0c564e3b79")]
	public partial class DominDriveDesignModelHasDomainServiceModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasDomainServiceModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76d97755, 0x3e4a, 0x455d, 0xbc, 0xdd, 0xff, 0x0c, 0x56, 0x4e, 0x3b, 0x79);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasDomainServiceModels link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">DomainServiceModel to use as the target of the relationship.</param>
		public DominDriveDesignModelHasDomainServiceModels(DominDriveDesignModel source, DomainServiceModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasDomainServiceModels.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasDomainServiceModels.DomainServiceModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasDomainServiceModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasDomainServiceModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasDomainServiceModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasDomainServiceModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0xfd35082c, 0x07b0, 0x4c8c, 0xa4, 0xc6, 0xcf, 0x9a, 0x83, 0xc0, 0xb4, 0x04);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainServiceModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fd35082c-07b0-4c8c-a4c6-cf9a83c0b404")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a DomainServiceModel
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(DomainServiceModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainServiceModelDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(DomainServiceModel element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainServiceModelDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region DomainServiceModel domain role code
		
		/// <summary>
		/// DomainServiceModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainServiceModelDomainRoleId = new global::System.Guid(0x823621d9, 0xe421, 0x4624, 0x81, 0x04, 0xcf, 0xa9, 0x84, 0xc6, 0x2d, 0x2b);
		
		/// <summary>
		/// DomainRole DomainServiceModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DomainServiceModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DomainServiceModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DomainServiceModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels/DomainServiceModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("823621d9-e421-4624-8104-cfa984c62d2b")]
		public virtual DomainServiceModel DomainServiceModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainServiceModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainServiceModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainServiceModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainServiceModels of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of DomainServiceModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainServiceModel> GetDomainServiceModels(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainServiceModel>, DomainServiceModel>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasDomainServiceModels links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> GetLinksToDomainServiceModels ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DomainServiceModel link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasDomainServiceModels link to a DomainServiceModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel domainServiceModelInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels>(domainServiceModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DomainServiceModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainServiceModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasDomainServiceModels instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasDomainServiceModels links between a given DominDriveDesignModel and a DomainServiceModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels link in links )
			{
				if ( target.Equals(link.DomainServiceModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasDomainServiceModels link between a given DominDriveDesignModeland a DomainServiceModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainServiceModels link in links )
			{
				if ( target.Equals(link.DomainServiceModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasFactoryModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3203cb88-f545-4902-883e-ff6543ce426c")]
	public partial class DominDriveDesignModelHasFactoryModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasFactoryModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3203cb88, 0xf545, 0x4902, 0x88, 0x3e, 0xff, 0x65, 0x43, 0xce, 0x42, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasFactoryModels link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">FactoryModel to use as the target of the relationship.</param>
		public DominDriveDesignModelHasFactoryModels(DominDriveDesignModel source, FactoryModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasFactoryModels.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasFactoryModels.FactoryModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasFactoryModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasFactoryModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasFactoryModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasFactoryModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0xc0cb7df5, 0x8033, 0x451d, 0x9b, 0x69, 0xfa, 0xc3, 0x70, 0x8d, 0xac, 0xee);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FactoryModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c0cb7df5-8033-451d-9b69-fac3708dacee")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a FactoryModel
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(FactoryModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FactoryModelDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(FactoryModel element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FactoryModelDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region FactoryModel domain role code
		
		/// <summary>
		/// FactoryModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FactoryModelDomainRoleId = new global::System.Guid(0x5e168d0f, 0x4a1d, 0x4686, 0x85, 0xc7, 0x58, 0x48, 0x5d, 0x7f, 0x24, 0x8a);
		
		/// <summary>
		/// DomainRole FactoryModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.FactoryModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/FactoryModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/FactoryModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels/FactoryModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5e168d0f-4a1d-4686-85c7-58485d7f248a")]
		public virtual FactoryModel FactoryModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FactoryModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FactoryModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FactoryModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FactoryModels of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of FactoryModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FactoryModel> GetFactoryModels(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FactoryModel>, FactoryModel>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasFactoryModels links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> GetLinksToFactoryModels ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region FactoryModel link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasFactoryModels link to a FactoryModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.FactoryModel factoryModelInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels>(factoryModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.FactoryModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FactoryModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasFactoryModels instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasFactoryModels links between a given DominDriveDesignModel and a FactoryModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.FactoryModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels link in links )
			{
				if ( target.Equals(link.FactoryModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasFactoryModels link between a given DominDriveDesignModeland a FactoryModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.FactoryModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasFactoryModels link in links )
			{
				if ( target.Equals(link.FactoryModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasValueObjectModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ed0a2e1a-8944-4fbe-89b7-9c47556fc5eb")]
	public partial class DominDriveDesignModelHasValueObjectModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasValueObjectModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xed0a2e1a, 0x8944, 0x4fbe, 0x89, 0xb7, 0x9c, 0x47, 0x55, 0x6f, 0xc5, 0xeb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasValueObjectModels link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">ValueObjectModel to use as the target of the relationship.</param>
		public DominDriveDesignModelHasValueObjectModels(DominDriveDesignModel source, ValueObjectModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasValueObjectModels.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasValueObjectModels.ValueObjectModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasValueObjectModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasValueObjectModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasValueObjectModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasValueObjectModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0x10c4b33e, 0x53ac, 0x4a3e, 0xac, 0x5e, 0x17, 0xf2, 0x93, 0x78, 0x69, 0xfb);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueObjectModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("10c4b33e-53ac-4a3e-ac5e-17f2937869fb")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a ValueObjectModel
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(ValueObjectModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueObjectModelDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(ValueObjectModel element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueObjectModelDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region ValueObjectModel domain role code
		
		/// <summary>
		/// ValueObjectModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueObjectModelDomainRoleId = new global::System.Guid(0x52f4817e, 0x8396, 0x4f66, 0x8b, 0x90, 0xfe, 0xb1, 0x7a, 0xdf, 0x35, 0x9e);
		
		/// <summary>
		/// DomainRole ValueObjectModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.ValueObjectModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/ValueObjectModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/ValueObjectModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels/ValueObjectModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("52f4817e-8396-4f66-8b90-feb17adf359e")]
		public virtual ValueObjectModel ValueObjectModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueObjectModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueObjectModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueObjectModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueObjectModels of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of ValueObjectModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ValueObjectModel> GetValueObjectModels(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ValueObjectModel>, ValueObjectModel>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasValueObjectModels links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> GetLinksToValueObjectModels ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region ValueObjectModel link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasValueObjectModels link to a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel valueObjectModelInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels>(valueObjectModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.ValueObjectModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueObjectModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasValueObjectModels instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasValueObjectModels links between a given DominDriveDesignModel and a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels link in links )
			{
				if ( target.Equals(link.ValueObjectModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasValueObjectModels link between a given DominDriveDesignModeland a ValueObjectModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasValueObjectModels link in links )
			{
				if ( target.Equals(link.ValueObjectModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainRelationship DominDriveDesignModelHasDomainEventModels
	/// Description for
	/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8b74b7a9-7be4-48ab-a027-d7dd77ae8aac")]
	public partial class DominDriveDesignModelHasDomainEventModels : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DominDriveDesignModelHasDomainEventModels domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8b74b7a9, 0x7be4, 0x48ab, 0xa0, 0x27, 0xd7, 0xdd, 0x77, 0xae, 0x8a, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DominDriveDesignModelHasDomainEventModels link in the same Partition as the given DominDriveDesignModel
		/// </summary>
		/// <param name="source">DominDriveDesignModel to use as the source of the relationship.</param>
		/// <param name="target">DomainEventModel to use as the target of the relationship.</param>
		public DominDriveDesignModelHasDomainEventModels(DominDriveDesignModel source, DomainEventModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DominDriveDesignModelHasDomainEventModels.DominDriveDesignModelDomainRoleId, source), new DslModeling::RoleAssignment(DominDriveDesignModelHasDomainEventModels.DomainEventModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasDomainEventModels(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasDomainEventModels(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DominDriveDesignModelHasDomainEventModels(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DominDriveDesignModelHasDomainEventModels(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DominDriveDesignModel domain role code
		
		/// <summary>
		/// DominDriveDesignModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DominDriveDesignModelDomainRoleId = new global::System.Guid(0x0b17faa0, 0xc503, 0x46e7, 0xa8, 0xb9, 0xf4, 0xed, 0xe2, 0x25, 0x8d, 0xea);
		
		/// <summary>
		/// DomainRole DominDriveDesignModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DominDriveDesignModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DominDriveDesignModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DominDriveDesignModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEventModels", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DominDriveDesignModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0b17faa0-c503-46e7-a8b9-f4ede2258dea")]
		public virtual DominDriveDesignModel DominDriveDesignModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DominDriveDesignModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DominDriveDesignModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DominDriveDesignModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DominDriveDesignModel of a DomainEventModel
		/// <summary>
		/// Gets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DominDriveDesignModel GetDominDriveDesignModel(DomainEventModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEventModelDomainRoleId) as DominDriveDesignModel;
		}
		
		/// <summary>
		/// Sets DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDominDriveDesignModel(DomainEventModel element, DominDriveDesignModel newDominDriveDesignModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEventModelDomainRoleId, newDominDriveDesignModel);
		}
		#endregion
		#region DomainEventModel domain role code
		
		/// <summary>
		/// DomainEventModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventModelDomainRoleId = new global::System.Guid(0x5b057b63, 0x9267, 0x4c5d, 0x91, 0x2d, 0x12, 0xfd, 0x7d, 0xcb, 0x00, 0xd6);
		
		/// <summary>
		/// DomainRole DomainEventModel
		/// Description for
		/// Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DomainEventModel
		/// </summary>
		[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DomainEventModel.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DomainEventModel.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DominDriveDesignModel", PropertyDisplayNameKey="Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels/DomainEventModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5b057b63-9267-4c5d-912d-12fd7dcb00d6")]
		public virtual DomainEventModel DomainEventModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEventModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEventModels of a DominDriveDesignModel
		/// <summary>
		/// Gets a list of DomainEventModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEventModel> GetDomainEventModels(DominDriveDesignModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEventModel>, DomainEventModel>(element, DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DominDriveDesignModel link accessor
		/// <summary>
		/// Get the list of DominDriveDesignModelHasDomainEventModels links to a DominDriveDesignModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> GetLinksToDomainEventModels ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel dominDriveDesignModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels>(dominDriveDesignModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DominDriveDesignModelDomainRoleId);
		}
		#endregion
		#region DomainEventModel link accessor
		/// <summary>
		/// Get the DominDriveDesignModelHasDomainEventModels link to a DomainEventModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels GetLinkToDominDriveDesignModel (global::Com.Lotos.BinbinDomainLanguage.DomainEventModel domainEventModelInstance)
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels>(domainEventModelInstance, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DomainEventModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEventModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DominDriveDesignModelHasDomainEventModels instance accessors
		
		/// <summary>
		/// Get any DominDriveDesignModelHasDomainEventModels links between a given DominDriveDesignModel and a DomainEventModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> GetLinks( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.DomainEventModel target )
		{
			global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> outLinks = new global::System.Collections.Generic.List<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels>();
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels link in links )
			{
				if ( target.Equals(link.DomainEventModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DominDriveDesignModelHasDomainEventModels link between a given DominDriveDesignModeland a DomainEventModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels GetLink( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel source, global::Com.Lotos.BinbinDomainLanguage.DomainEventModel target )
		{
			global::System.Collections.Generic.IList<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels>(source, global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels.DominDriveDesignModelDomainRoleId);
			foreach ( global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModelHasDomainEventModels link in links )
			{
				if ( target.Equals(link.DomainEventModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
