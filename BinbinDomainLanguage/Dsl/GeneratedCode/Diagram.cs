//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDiagram")]

namespace Com.Lotos.BinbinDomainLanguage
{
	/// <summary>
	/// DomainClass BinbinDomainLanguageDiagram
	/// Description for Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDiagram.DisplayName", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDiagram.Description", typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel), "Com.Lotos.BinbinDomainLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("efcdea8e-bf62-4b87-b8de-333707fea0b7")]
	public partial class BinbinDomainLanguageDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::Com.Lotos.BinbinDomainLanguage.ExampleConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities)
			{
				global::Com.Lotos.BinbinDomainLanguage.AggregateRootShape newShape = new global::Com.Lotos.BinbinDomainLanguage.AggregateRootShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Com.Lotos.BinbinDomainLanguage.EntityModel)
			{
				global::Com.Lotos.BinbinDomainLanguage.EntityShape newShape = new global::Com.Lotos.BinbinDomainLanguage.EntityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel)
			{
				global::Com.Lotos.BinbinDomainLanguage.DomainServiceShape newShape = new global::Com.Lotos.BinbinDomainLanguage.DomainServiceShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Com.Lotos.BinbinDomainLanguage.DomainEventModel)
			{
				global::Com.Lotos.BinbinDomainLanguage.DomainEventShape newShape = new global::Com.Lotos.BinbinDomainLanguage.DomainEventShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel)
			{
				global::Com.Lotos.BinbinDomainLanguage.ValueObjectShape newShape = new global::Com.Lotos.BinbinDomainLanguage.ValueObjectShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Com.Lotos.BinbinDomainLanguage.FactoryModel)
			{
				global::Com.Lotos.BinbinDomainLanguage.FactoryShape newShape = new global::Com.Lotos.BinbinDomainLanguage.FactoryShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Com.Lotos.BinbinDomainLanguage.AggregateRootShape.DecoratorsInitialized += AggregateRootShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AggregateRootShape.
		/// </summary>
		internal static partial class AggregateRootShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AggregateRootShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::Com.Lotos.BinbinDomainLanguage.EntityRelationshipConnectAction entityRelationshipConnectAction;
		private global::Com.Lotos.BinbinDomainLanguage.EntiyValueObjectRelationShipConnectAction entiyValueObjectRelationShipConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageToolboxHelper.EntityRelationshipFilterString))
				{
					if (this.entityRelationshipConnectAction == null)
					{
						this.entityRelationshipConnectAction = new global::Com.Lotos.BinbinDomainLanguage.EntityRelationshipConnectAction(this);
						this.entityRelationshipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.entityRelationshipConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Com.Lotos.BinbinDomainLanguage.BinbinDomainLanguageToolboxHelper.EntiyValueObjectRelationShipFilterString))
				{
					if (this.entiyValueObjectRelationShipConnectAction == null)
					{
						this.entiyValueObjectRelationShipConnectAction = new global::Com.Lotos.BinbinDomainLanguage.EntiyValueObjectRelationShipConnectAction(this);
						this.entiyValueObjectRelationShipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.entiyValueObjectRelationShipConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.entityRelationshipConnectAction != null)
					{
						this.entityRelationshipConnectAction.Dispose();
						this.entityRelationshipConnectAction = null;
					}
					if(this.entiyValueObjectRelationShipConnectAction != null)
					{
						this.entiyValueObjectRelationShipConnectAction.Dispose();
						this.entiyValueObjectRelationShipConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// BinbinDomainLanguageDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xefcdea8e, 0xbf62, 0x4b87, 0xb8, 0xde, 0x33, 0x37, 0x07, 0xfe, 0xa0, 0xb7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BinbinDomainLanguageDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BinbinDomainLanguageDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Com.Lotos.BinbinDomainLanguage
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.EntityModel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.DomainEventModel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Com.Lotos.BinbinDomainLanguage.FactoryModel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities)
				{
					parentElement = GetParentForAggregateRootEntities((global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities)childElement);
				} else
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.EntityModel)
				{
					parentElement = GetParentForEntityModel((global::Com.Lotos.BinbinDomainLanguage.EntityModel)childElement);
				} else
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel)
				{
					parentElement = GetParentForDomainServiceModel((global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel)childElement);
				} else
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.DomainEventModel)
				{
					parentElement = GetParentForDomainEventModel((global::Com.Lotos.BinbinDomainLanguage.DomainEventModel)childElement);
				} else
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel)
				{
					parentElement = GetParentForValueObjectModel((global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel)childElement);
				} else
				if(childElement is global::Com.Lotos.BinbinDomainLanguage.FactoryModel)
				{
					parentElement = GetParentForFactoryModel((global::Com.Lotos.BinbinDomainLanguage.FactoryModel)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForAggregateRootEntities( global::Com.Lotos.BinbinDomainLanguage.AggregateRootEntities root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForEntityModel( global::Com.Lotos.BinbinDomainLanguage.EntityModel root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForDomainServiceModel( global::Com.Lotos.BinbinDomainLanguage.DomainServiceModel root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForDomainEventModel( global::Com.Lotos.BinbinDomainLanguage.DomainEventModel root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForValueObjectModel( global::Com.Lotos.BinbinDomainLanguage.ValueObjectModel root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel GetParentForFactoryModel( global::Com.Lotos.BinbinDomainLanguage.FactoryModel root )
			{
				// Segments 0 and 1
				global::Com.Lotos.BinbinDomainLanguage.DominDriveDesignModel result = root.DominDriveDesignModel;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
	}
